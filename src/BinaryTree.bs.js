// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List            = require("bs-platform/lib/js/list.js");
var Curry           = require("bs-platform/lib/js/curry.js");
var Random          = require("bs-platform/lib/js/random.js");
var Caml_obj        = require("bs-platform/lib/js/caml_obj.js");
var Caml_array      = require("bs-platform/lib/js/caml_array.js");
var Generator$Mazes = require("./Generator.bs.js");

function init() {
  var start = Random.$$int(5);
  return /* record */[
          /* visited */Caml_array.caml_make_vect(5, 0),
          /* edges */Generator$Mazes.PairSet[/* empty */0],
          /* frontier : :: */[
            /* tuple */[
              start,
              start
            ],
            /* [] */0
          ],
          /* next : [] */0,
          /* step */0
        ];
}

function edges(state) {
  return state[/* edges */1];
}

function visited(state) {
  return state[/* visited */0];
}

function max_age(state) {
  return state[/* step */4];
}

function sortpair(a, b) {
  var match = Caml_obj.caml_greaterthan(a, b);
  if (match !== 0) {
    return /* tuple */[
            b,
            a
          ];
  } else {
    return /* tuple */[
            a,
            b
          ];
  }
}

function add_edges(adjacents, state, param) {
  var src = param[1];
  Caml_array.caml_array_set(state[/* visited */0], src, state[/* step */4] + 1 | 0);
  var next = List.fold_left((function (next, dest) {
          if (Caml_array.caml_array_get(state[/* visited */0], dest) > 0) {
            return next;
          } else {
            Caml_array.caml_array_set(state[/* visited */0], dest, state[/* step */4] + 1 | 0);
            return /* :: */[
                    /* tuple */[
                      src,
                      dest
                    ],
                    next
                  ];
          }
        }), state[/* next */3], adjacents);
  return /* tuple */[
          next,
          Curry._2(Generator$Mazes.PairSet[/* add */3], sortpair(param[0], src), state[/* edges */1]),
          state[/* step */4] + 1 | 0
        ];
}

var size = 5;

exports.size      = size;
exports.init      = init;
exports.edges     = edges;
exports.visited   = visited;
exports.max_age   = max_age;
exports.sortpair  = sortpair;
exports.add_edges = add_edges;
/* Generator-Mazes Not a pure module */
